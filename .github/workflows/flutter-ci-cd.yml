name: Flutter CI/CD

# FIX: merged duplicate push triggers; single push block handles branches + version tags
on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, dev ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  analyze-test:
    name: Analyze • Test • Coverage (Android only)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Cache pub deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-${{ runner.os }}-

      - name: flutter pub get
        run: flutter pub get

      - name: Analyze (fail on warning)
        run: |
          flutter analyze > analyze.log
          if grep -E "^warning" analyze.log; then
            echo "Lint warnings found. Failing build." && exit 1
          fi
          cat analyze.log

      - name: Run unit tests
        run: flutter test --reporter expanded

      - name: Run integration tests (if folder exists)
        run: |
          if [ -d integration_test ]; then
            flutter test integration_test --reporter expanded
          else
            echo "No integration_test directory. Skipping."
          fi

      - name: Coverage
        run: flutter test --coverage

      - name: Generate coverage badge
        run: |
          gen_badge() {
            percent=$(lcov --summary coverage/lcov.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
            color=red
            if (( $(echo "$percent >= 90" | bc -l) )); then color=brightgreen; elif (( $(echo "$percent >= 75" | bc -l) )); then color=yellow; fi
            echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"$percent%\",\"color\":\"$color\"}" > coverage/badge.json
          }
          pip install lcov-badge || true
          gen_badge

      - name: Upload coverage lcov
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: |
            coverage/lcov.info
            coverage/badge.json

      - name: Publish coverage badge to README
        if: github.ref == 'refs/heads/main'
        run: |
          cp coverage/badge.json ./coverage-badge.json
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add coverage-badge.json
          git commit -m "chore: update coverage badge [skip ci]" || echo "No changes to commit"
          git push origin HEAD:main

  build-apk:
    name: Build & (Tag/Release) APK
    runs-on: ubuntu-latest
    needs: analyze-test
    if: >-
      github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: flutter pub get
        run: flutter pub get

      - name: Build release APK
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
            name: mangamari-apk
            path: build/app/outputs/flutter-apk/app-release.apk

      - name: Attach to GitHub Release (if release event)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: build/app/outputs/flutter-apk/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Release for Tag (if tag push but no release event)
        if: github.event_name != 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: build/app/outputs/flutter-apk/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
